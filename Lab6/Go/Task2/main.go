// Задание:
// Реализуйте приложение на Go, которое использует каналы для передачи данных между двумя горутинами.
// 1. Одна горутина должна генерировать последовательность чисел (например, первые 10 чисел Фибоначчи) и отправлять их в канал.
// 2. Другая горутина должна считывать данные из канала и выводить их на экран.
// 3. Используйте блокировку канала с помощью close(), чтобы сигнализировать, что данные больше не будут отправляться в канал.
// 4. Объясните роль закрытия канала.

package main

import (
	"fmt"
	"sync"
)

// Функция для генерации чисел Фибоначчи и отправки их в канал
func generateFibonacci(n int, ch chan int, wg *sync.WaitGroup) {
	defer wg.Done() // Сигнализируем, что горутина завершила свою работу
	a, b := 0, 1
	for i := 0; i < n; i++ {
		ch <- a
		a, b = b, a+b
	}
	close(ch) // Закрываем канал после отправки всех данных
}

// Функция для чтения данных из канала и их вывода на экран
func printFibonacci(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for num := range ch {
		fmt.Println(num)
	}
}

func main() {
	n := 10
	ch := make(chan int)
	var wg sync.WaitGroup // Создаем WaitGroup для синхронизации

	// Добавляем в WaitGroup две горутины
	wg.Add(2)

	go generateFibonacci(n, ch, &wg)

	go printFibonacci(ch, &wg)

	// Ожидаем завершения всех горутин
	wg.Wait()
}
